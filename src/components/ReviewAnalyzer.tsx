"use client";

import {
  useState,
  useTransition,
  FormEvent,
  ChangeEvent,
  DragEvent,
} from "react";
import { UploadCloud } from "lucide-react";

import { analyzeCustomerReviews } from "@/actions/mastra/action";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

export function ReviewAnalyzer() {
  const [file, setFile] = useState<File | null>(null);
  const [fileName, setFileName] = useState<string>("");
  const [analysis, setAnalysis] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);
  const [isPending, startTransition] = useTransition();

  function handleFileChange(e: ChangeEvent<HTMLInputElement>) {
    if (e.target.files && e.target.files.length > 0) {
      setFile(e.target.files[0]);
      setFileName(e.target.files[0].name);
    }
  }

  function handleDragOver(e: DragEvent<HTMLLabelElement>) {
    e.preventDefault();
    e.stopPropagation();
  }

  function handleDrop(e: DragEvent<HTMLLabelElement>) {
    e.preventDefault();
    e.stopPropagation();

    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      setFile(e.dataTransfer.files[0]);
      setFileName(e.dataTransfer.files[0].name);
    }
  }

  function handleSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    setError(null);

    if (!file) {
      setError("Please select a CSV file first");

      return;
    }

    startTransition(async () => {
      try {
        // Pass the file to the server action directly, as context
        const result = await analyzeCustomerReviews(file);

        setAnalysis(result);
      } catch (error: any) {
        setError(error.message || "Something went wrong analyzing the reviews");
      }
    });
  }

  return (
    <div className="w-full">
      <form className="flex flex-col gap-4" onSubmit={handleSubmit}>
        <div className="grid w-full items-center gap-1.5">
          <Label
            className="flex flex-col items-center justify-center w-full h-32 border-2 border-dashed rounded-lg cursor-pointer bg-background/5 hover:bg-background/10"
            htmlFor="csvFile"
            onDragOver={handleDragOver}
            onDrop={handleDrop}
          >
            <div className="flex flex-col items-center justify-center pt-5 pb-6">
              <UploadCloud className="w-8 h-8 mb-3 text-muted-foreground" />
              <p className="mb-2 text-sm text-muted-foreground">
                <span className="font-semibold">Click to upload</span> or drag
                and drop
              </p>
              <p className="text-xs text-muted-foreground">CSV files only</p>
            </div>
            <Input
              accept=".csv"
              className="hidden"
              id="csvFile"
              name="csvFile"
              type="file"
              onChange={handleFileChange}
            />
          </Label>
        </div>

        {fileName && (
          <p className="text-sm text-center">
            Selected file: <span className="font-medium">{fileName}</span>
          </p>
        )}

        <Button disabled={isPending || !file} type="submit">
          {isPending ? "Analyzing..." : "Analyze Reviews"}
        </Button>
      </form>

      {error && (
        <Alert className="mt-4" variant="destructive">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {analysis && (
        <Card className="mt-6">
          <CardContent className="pt-6">
            <h3 className="text-lg font-semibold mb-2">Analysis Results</h3>
            {typeof analysis === "string" ? (
              <div className="whitespace-pre-wrap">{analysis}</div>
            ) : (
              <div className="space-y-4">
                <div className="space-y-2">
                  <h4 className="font-medium">Key Insights</h4>
                  <div className="pl-4">
                    {analysis.keyInsights?.map((insight: string, i: number) => (
                      <p key={i}>â€¢ {insight}</p>
                    )) || <p>No key insights provided</p>}
                  </div>
                </div>

                {analysis.summary && (
                  <div>
                    <h4 className="font-medium">Summary</h4>
                    <p>{analysis.summary}</p>
                  </div>
                )}
              </div>
            )}
          </CardContent>
          <CardFooter className="text-sm text-muted-foreground">
            Analysis generated by AI based on provided customer reviews
          </CardFooter>
        </Card>
      )}
    </div>
  );
}
